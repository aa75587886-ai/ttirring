openapi: 3.0.3
info:
  title: Ttirring (띠링) Platform API
  version: 0.1.0
  description: |
    Core endpoints for dispatch, reservations, jobs, wallet recharge, and settlements.
    All sample values are placeholders (no real addresses/coords).
servers:
  - url: http://localhost:3000
    description: Local mock server

tags:
  - name: Health
  - name: Dispatch
  - name: Reservations
  - name: Jobs
  - name: Wallet
  - name: Settlements

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true

  /v1/dispatch/soft:
    post:
      tags: [Dispatch]
      summary: Send a soft dispatch to a specific driver
      description: |
        Sends a non-blocking (soft) dispatch ping/notification to a target driver.
        The driver may choose to accept; no hard assignment is performed here.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SoftDispatchRequest'
            examples:
              sample:
                value:
                  job_id: "J300"
                  driver_id: "DRV-001"
                  note: "가벼운 확인 요청"
      responses:
        '200':
          description: Dispatch notification queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SoftDispatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/reservations:
    post:
      tags: [Reservations]
      summary: Create a reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreate'
            examples:
              sample:
                value:
                  job_id: "J300"
                  channel_id: "CH-01"
                  passenger_name: "홍길동"
                  pickup_addr: "서울역"
                  dropoff_addr: "성남시"
      responses:
        '201':
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '409':
          description: Duplicate job_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                dup:
                  value:
                    ok: false
                    message: "이미 존재하는 job_id 입니다."
    get:
      tags: [Reservations]
      summary: List reservations
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: status
          schema:
            type: string
            enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
      responses:
        '200':
          description: Paged reservation list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationListResponse'

  /v1/reservations/{id}:
    get:
      tags: [Reservations]
      summary: Get a reservation by numeric id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [Reservations]
      summary: Update reservation status or fields (partial)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdate'
            examples:
              statusOnly:
                value: { status: "CONFIRMED" }
      responses:
        '200':
          description: Updated reservation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/jobs:
    post:
      tags: [Jobs]
      summary: Create a job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreate'
            examples:
              sample:
                value:
                  job_id: "J300"
                  pickup:
                    addr: "서울역"
                    lat: 37.555
                    lng: 126.9707
                  dropoff:
                    addr: "성남시"
                    lat: 37.42
                    lng: 127.13
                  metadata:
                    channel_id: "CH-01"
                    passenger_name: "홍길동"
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '409':
          $ref: '#/components/responses/Conflict'
    get:
      tags: [Jobs]
      summary: List jobs
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: status
          schema:
            type: string
            enum: [CREATED, DISPATCHING, ASSIGNED, IN_PROGRESS, DONE, CANCELLED]
      responses:
        '200':
          description: Paged job list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'

  /v1/jobs/{job_id}:
    get:
      tags: [Jobs]
      summary: Get a job by job_id (string)
      parameters:
        - in: path
          name: job_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [Jobs]
      summary: Update a job (partial)
      description: Update status, assigned driver, or metadata fields.
      parameters:
        - in: path
          name: job_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdate'
            examples:
              statusOnly:
                value: { status: "DISPATCHING" }
              assignDriver:
                value: { driver_id: "DRV-001", status: "ASSIGNED" }
      responses:
        '200':
          description: Job updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/wallet/recharge:
    post:
      tags: [Wallet]
      summary: Recharge wallet balance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RechargeRequest'
            examples:
              sample:
                value:
                  user_id: "USR-1001"
                  amount: 50000
                  method: "CARD"
      responses:
        '200':
          description: Recharge result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RechargeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/wallet/transactions:
    get:
      tags: [Wallet]
      summary: List wallet transactions
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 10, maximum: 100 }
      responses:
        '200':
          description: Paged transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'

  /v1/settlements/request:
    post:
      tags: [Settlements]
      summary: Request settlement (payout)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettlementRequest'
            examples:
              sample:
                value:
                  driver_id: "DRV-001"
                  amount: 120000
                  bank_account: "국민 123-45-678901"
      responses:
        '200':
          description: Settlement request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettlementResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/settlements:
    get:
      tags: [Settlements]
      summary: List settlements
      parameters:
        - in: query
          name: driver_id
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 10, maximum: 100 }
      responses:
        '200':
          description: Paged settlements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettlementListResponse'

components:
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            nf:
              value: { ok: false, message: "Not found" }
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            br:
              value: { ok: false, message: "Bad request" }
    Conflict:
      description: Conflict (duplicate or invalid state)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            conf:
              value: { ok: false, message: "Conflict" }

  schemas:
    ApiError:
      type: object
      properties:
        ok: { type: boolean, example: false }
        message: { type: string, example: "에러 메시지" }

    PageMeta:
      type: object
      properties:
        ok: { type: boolean, example: true }
        page: { type: integer, example: 1 }
        size: { type: integer, example: 10 }
        total: { type: integer, example: 1 }
        pages: { type: integer, example: 1 }

    # ---------- Dispatch ----------
    SoftDispatchRequest:
      type: object
      required: [job_id, driver_id]
      properties:
        job_id: { type: string }
        driver_id: { type: string }
        note: { type: string, nullable: true }
    SoftDispatchResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        dispatched: { type: boolean, example: true }
        job_id: { type: string, example: "J300" }
        driver_id: { type: string, example: "DRV-001" }

    # ---------- Reservations ----------
    Reservation:
      type: object
      properties:
        id: { type: integer, example: 1 }
        jobId: { type: string, example: "J300" }
        channelId: { type: string, example: "CH-01" }
        passengerName: { type: string, example: "홍길동" }
        pickupAddr: { type: string, example: "서울역" }
        dropoffAddr: { type: string, example: "성남시" }
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
          example: PENDING
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ReservationCreate:
      type: object
      required: [job_id, channel_id, passenger_name, pickup_addr, dropoff_addr]
      properties:
        job_id: { type: string }
        channel_id: { type: string }
        passenger_name: { type: string }
        pickup_addr: { type: string }
        dropoff_addr: { type: string }

    ReservationUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
        passenger_name: { type: string }
        pickup_addr: { type: string }
        dropoff_addr: { type: string }

    ReservationResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        reservation:
          $ref: '#/components/schemas/Reservation'

    ReservationListResponse:
      allOf:
        - $ref: '#/components/schemas/PageMeta'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Reservation'

    # ---------- Jobs ----------
    Job:
      type: object
      properties:
        jobId: { type: string, example: "J300" }
        status:
          type: string
          enum: [CREATED, DISPATCHING, ASSIGNED, IN_PROGRESS, DONE, CANCELLED]
          example: CREATED
        driverId:
          type: string
          nullable: true
          example: "DRV-001"
        pickup:
          type: object
          properties:
            addr: { type: string, example: "서울역" }
            lat: { type: number, format: double, example: 37.555 }
            lng: { type: number, format: double, example: 126.9707 }
        dropoff:
          type: object
          properties:
            addr: { type: string, example: "성남시" }
            lat: { type: number, format: double, example: 37.42 }
            lng: { type: number, format: double, example: 127.13 }
        metadata:
          type: object
          additionalProperties: true
          example:
            channel_id: "CH-01"
            passenger_name: "홍길동"
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    JobCreate:
      type: object
      required: [job_id, pickup, dropoff]
      properties:
        job_id: { type: string }
        pickup:
          type: object
          required: [addr]
          properties:
            addr: { type: string }
            lat: { type: number, format: double }
            lng: { type: number, format: double }
        dropoff:
          type: object
          required: [addr]
          properties:
            addr: { type: string }
            lat: { type: number, format: double }
            lng: { type: number, format: double }
        metadata:
          type: object
          additionalProperties: true

    JobUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [CREATED, DISPATCHING, ASSIGNED, IN_PROGRESS, DONE, CANCELLED]
        driver_id:
          type: string
          description: Assign or change driver
        metadata:
          type: object
          additionalProperties: true

    JobResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        job:
          $ref: '#/components/schemas/Job'

    JobListResponse:
      allOf:
        - $ref: '#/components/schemas/PageMeta'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Job'

    # ---------- Wallet ----------
    RechargeRequest:
      type: object
      required: [user_id, amount, method]
      properties:
        user_id: { type: string }
        amount: { type: integer, minimum: 1 }
        method:
          type: string
          enum: [CARD, BANK, POINT]
    RechargeResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        balance: { type: integer, example: 150000 }
        transaction_id: { type: string, example: "TX-20250830-0001" }

    Transaction:
      type: object
      properties:
        id: { type: string, example: "TX-20250830-0001" }
        type: { type: string, enum: [RECHARGE, PAYMENT, REFUND, ADJUST] }
        amount: { type: integer, example: 50000 }
        createdAt: { type: string, format: date-time }
        note: { type: string, nullable: true }

    TransactionListResponse:
      allOf:
        - $ref: '#/components/schemas/PageMeta'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'

    # ---------- Settlements ----------
    SettlementRequest:
      type: object
      required: [driver_id, amount, bank_account]
      properties:
        driver_id: { type: string }
        amount: { type: integer, minimum: 1 }
        bank_account: { type: string }
    Settlement:
      type: object
      properties:
        id: { type: string, example: "STL-0001" }
        driverId: { type: string, example: "DRV-001" }
        amount: { type: integer, example: 120000 }
        status: { type: string, enum: [REQUESTED, PROCESSING, PAID, REJECTED], example: REQUESTED }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    SettlementResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        settlement:
          $ref: '#/components/schemas/Settlement'
    SettlementListResponse:
      allOf:
        - $ref: '#/components/schemas/PageMeta'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Settlement'
