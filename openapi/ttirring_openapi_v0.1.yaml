openapi: 3.0.3
info:
  title: Ttirring API
  version: v0.1
  description: >
    Dispatch MVP for Ttirring. Includes idempotent wallet APIs, basic reservations,
    and report/stat endpoints with standardized error responses.

servers:
  - url: http://localhost:3000

tags:
  - name: Health
  - name: Reservations
  - name: Wallet
  - name: Reports

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthOk'

  /v1/reservations:
    post:
      tags: [Reservations]
      summary: Create reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreateRequest'
            examples:
              example:
                value:
                  userId: DR-01
                  channelId: CH-02
                  pickup: { lat: 37.5, lng: 127.0 }
                  dropoff: { lat: 37.6, lng: 127.1 }
                  scheduledAt: "2025-09-06T10:00:00Z"
                  reqId: "REQ-XYZ"
      responses:
        '201':
          description: Created
          headers:
            X-Idempotent:
              schema: { type: boolean }
              description: Whether this response is from an idempotent replay.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Channel or User not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
              examples:
                CHANNEL_NOT_FOUND: { value: { ok: false, code: "CHANNEL_NOT_FOUND", message: "Unknown channelId" } }
                USER_NOT_FOUND:    { value: { ok: false, code: "USER_NOT_FOUND",    message: "Unknown userId" } }

  /v1/wallet_tx/debit:
    post:
      tags: [Wallet]
      summary: Debit from driver wallet (idempotent by txId)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WalletDebitRequest' }
            examples:
              newTx:
                value:
                  userId: DR-01
                  amount: 1000
                  reason: FEE
                  jobId: J0901
                  channelId: CH-02
                  txId: TX-20250906-0001
              replay:
                value:
                  userId: DR-01
                  amount: 1000
                  reason: FEE
                  jobId: J0901
                  channelId: CH-02
                  txId: TX-20250906-0001
      responses:
        '201':
          description: Debited (first time)
          headers:
            X-Idempotent:
              schema: { type: boolean, example: false }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WalletDebitResponse' }
        '200':
          description: Idempotent replay (no-op)
          headers:
            X-Idempotent:
              schema: { type: boolean, example: true }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/WalletDebitResponse' }
              examples:
                replay:
                  value:
                    ok: true
                    debit:
                      userId: DR-01
                      amount: 1000
                      reason: FEE
                      jobId: J0901
                      channelId: CH-02
                      txId: TX-20250906-0001
                    idempotent: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Related entity not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
              examples:
                CHANNEL_NOT_FOUND: { value: { ok: false, code: "CHANNEL_NOT_FOUND", message: "Unknown channelId" } }
                USER_NOT_FOUND:    { value: { ok: false, code: "USER_NOT_FOUND",    message: "Unknown userId" } }
                JOB_NOT_FOUND:     { value: { ok: false, code: "JOB_NOT_FOUND",     message: "Unknown jobId" } }

  /v1/jobs/stats:
    get:
      tags: [Reports]
      summary: Job statistics by channel
      parameters:
        - in: query
          name: channelId
          schema: { type: string }
          required: true
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/JobsStatsResponse' }
        '404':
          description: Channel not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
              examples:
                CHANNEL_NOT_FOUND: { value: { ok: false, code: "CHANNEL_NOT_FOUND", message: "Unknown channelId" } }

components:
  responses:
    BadRequest:
      description: Bad Request (validation)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          examples:
            INVALID_REQUEST:
              value: { ok: false, code: "INVALID_REQUEST", message: "Invalid fields" }

  schemas:
    HealthOk:
      type: object
      properties:
        ok: { type: boolean, example: true }
        message: { type: string, example: "Reservation/Wallet API running" }

    LatLng:
      type: object
      required: [lat, lng]
      properties:
        lat: { type: number }
        lng: { type: number }

    ReservationCreateRequest:
      type: object
      required: [userId, channelId, pickup, dropoff, scheduledAt, reqId]
      properties:
        userId: { type: string }
        channelId: { type: string }
        pickup: { $ref: '#/components/schemas/LatLng' }
        dropoff: { $ref: '#/components/schemas/LatLng' }
        scheduledAt: { type: string, format: date-time }
        reqId: { type: string, description: "Idempotency key for reservations" }

    ReservationCreateResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        reservation:
          type: object
          properties:
            reservationId: { type: string, example: "R-1757159525356-82" }
            userId: { type: string, example: "DR-01" }
            channelId: { type: string, example: "CH-02" }
            pickup: { $ref: '#/components/schemas/LatLng' }
            dropoff: { $ref: '#/components/schemas/LatLng' }
            scheduledAt: { type: string, format: date-time }

    WalletDebitRequest:
      type: object
      required: [userId, amount, reason, channelId, txId]
      properties:
        userId: { type: string }
        amount: { type: integer, minimum: 1 }
        reason: { type: string, example: "FEE" }
        jobId: { type: string, nullable: true }
        channelId: { type: string }
        txId: { type: string, description: "Idempotency key for debit" }

    WalletDebitResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        debit:
          type: object
          properties:
            userId: { type: string }
            amount: { type: integer }
            reason: { type: string }
            jobId: { type: string, nullable: true }
            channelId: { type: string }
            txId: { type: string }
        idempotent: { type: boolean, example: false }

    JobsStatsResponse:
      type: object
      properties:
        ok: { type: boolean, example: true }
        series:
          type: array
          items:
            type: object
            properties:
              day: { type: string, example: "2025-09-01" }
              jobs: { type: integer, example: 3 }
              amount: { type: integer, example: 53000 }
              driverPayout: { type: integer, example: 42400 }
              platformFee: { type: integer, example: 10600 }
        channelId: { type: string, example: "CH-02" }

    Error:
      type: object
      required: [ok, code, message]
      properties:
        ok: { type: boolean, example: false }
        code:
          type: string
          enum:
            - INVALID_REQUEST
            - USER_NOT_FOUND
            - JOB_NOT_FOUND
            - CHANNEL_NOT_FOUND
        message:
          type: string
          example: "Unknown channelId"
